import math
from decimal import Decimal, getcontext

# Formula for circumference of a circle is 2πr, or dπ
# Archimedes drew regular polygons inscribed within a circle with radius of 1 to approximate π
# The more sides used, the better the approximation of π would be
# As the number of sides increases and each side becomes smaller, the circumference becomes closer to 2π

# The formula for the length of a side, given the previous side is:
# d_{2n} = \sqrt{2 - 2\sqrt[1 - \frac{d_n^2}{4}}]}

# d_1 = \sqrt{2} because we start with a square inscribed within a circle. Each side of the square is \sqrt{2}


def archimedes(n_iter, n_places):
    # Double precision
    getcontext().prec = 2 * n_places

    # Start with a square with sides of \sqrt{2}
    polygon_edge_length_squared = Decimal(2)
    polygon_sides = 4

    for i in range(n_iter):
        # Get new length of side as the side length doubles
        polygon_edge_length_squared = (
            2 - 2 * (1 - polygon_edge_length_squared / 4).sqrt()
        )
        polygon_sides *= 2

    # Get the circumference of the circle, which is 2v, and divide by 2 to get the approximation of π
    pi_approx = polygon_sides * polygon_edge_length_squared.sqrt() / 2

    # Round to exactly n_places
    getcontext().prec = n_places
    return +pi_approx


n_iter = 1000

n_places = 1000
pi_approx = archimedes(n_iter, n_places)

print(f"Archimedes Pi Approximation: {pi_approx}")
print("\n\n")
print(f"Absolute Error: {abs(pi_approx - Decimal(math.pi))}")
print("\n\n")

"""
Archimedes Pi Approximation: 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129833673362440656643086021394946395224737190702179860943702770539217176293176752384674818467669405131997755014926571661370182762037324255472112046106167092783542610676462444481821518657401597710015047974029696733526142300062778375035090504907393670176908456659770690941004322805709633717996810948543581485855510447557743846701313771177799564349142023877448569914475331256311508612287289715774221426269786026200747996851344829614508759161312405893181865522803451535751010994280546677263698225502908457

Absolute Error: 1.22464679914735317722606593227500105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129833673362440656643086021394946395224737190702179860943702770539217176293176752384674818467669405131997755014926571661370182762037324255472112046106167092783542610676462444481821518657401597710015047974029696733526142300062778375035090504907393670176908456659770690941004322805709633717996810948543581485855510447557743846701313771177799564349142023877448569914475331256311508612287289715774221426269786026200747996851344829614508759161312405893181865522803451535751010994280546677263698225502908457E-16
"""
