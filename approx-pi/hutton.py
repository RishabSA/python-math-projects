import math
from decimal import Decimal, getcontext

# Machin's formula is π/4 = 4cot⁻¹(5) - cot⁻¹(239)
# = 4tan⁻¹(1/5) - tan⁻¹(1/239)
# = 4 * arctan(1/5) - arctan(1/239)

# arctan(x) + arctan(y) = arctan((x + y) / (1 - xy))
# Using this, we can simplify 4 * arctan(1/5) - arctan(1/239), and get that:
# 4 * arctan(1/5) - arctan(1/239) = arctan(1) = π/4

# The McLaurin Series for arctan(x) is:
# x - x^3/3 + x^5/5 - x^7/7 + x^9/9 - x^11/11 + ...
# Σ{i = 1}^{n_iter} (-1)^(i) x^(2i + 1)/(2i + 1)

# The McLaurin series for arctan(1/x) is:
# \frac{1}{x} - \frac{1}{3x^3} + \frac{1}{5x^5} - \frac{1}{7x^7} + \frac{1}{9x^9} - ... {x >= 1}

# Each term in the series is created by dividing the previous term by a small integer
# Because the terms get smaller very quickly, the series will converge quickly
# The denominators get very large, so it is inefficient to divide by large numbers.
# Instead, we can use fixed point arithmetic to speed it up by multiplying evyerhting by a large number such as 10^100
# All calculations are done with integers, and at the end, we shift the decimal place 100 places to the left to get the final answer

# Another way to calculate arctan is using Euler's accelerated formula:
# arctan(1/x) = \frac{x}{1 + x^2}+\frac{2}{3}\frac{x}{(1+x^2)^2}+\frac{2 * 4}{3 * 5}\frac{x}{(1+x^2)^3}+\frac{2 * 4 * 6}{3 * 5 * 7}\frac{x}{(1 + x^2)^4} + ...


def arctan(x, n_places):
    # Calculate arctan(1/x)

    # Double precision
    getcontext().prec = 2 * n_places

    # Shift for fixed point arithmetic to work with integers instead of floats
    one = 10**n_places

    power = one // x  # +- \frac{1}{x^n}
    total = power
    x_squared = x**2
    divisor = Decimal(1)
    while True:
        # Use integer division because we are already multiplying by large number before
        power = -power // x_squared
        divisor += 2
        delta = power // divisor
        if delta == 0:
            break
        total += delta

    return total


def arctan_euler(x, n_places):
    # Calculate arctan(1/x) using Euler's accelerated formula

    # Double precision
    getcontext().prec = 2 * n_places

    # Shift for fixed point arithmetic to work with integers instead of floats
    one = 10**n_places

    x_squared_plus_1 = Decimal(x**2 + 1)
    term = Decimal((x * one) // x_squared_plus_1)
    total = term
    two_n = 2
    while True:
        # Use integer division because we are already multiplying by large number before
        divsor = (two_n + 1) * x_squared_plus_1
        term *= two_n
        term = term // divsor
        if term == 0:
            break
        total += term
        two_n += 2

    return total


def hutton(n_places):
    one = 10**n_places
    pi_approx = Decimal((4 * (2 * arctan(3, n_places) + arctan(7, n_places))) / one)

    # Round to exactly n_places
    getcontext().prec = n_places
    return +pi_approx


def hutton_euler(n_places):
    one = 10**n_places
    pi_approx = Decimal(
        (4 * (2 * arctan_euler(3, n_places) + arctan_euler(7, n_places))) / one
    )

    # Round to exactly n_places
    getcontext().prec = n_places
    return +pi_approx


n_places = 1000
pi_approx = hutton(n_places=n_places)

print(f"Hutton Pi Approximation: {pi_approx}")
print("\n\n")
print(f"Absolute Error: {abs(pi_approx - Decimal(math.pi))}")
print("\n\n")

euler_pi_approx = hutton_euler(n_places=n_places)

print(f"Hutton Pi Approximation (Euler): {euler_pi_approx}")
print("\n\n")
print(f"Absolute Error: {abs(euler_pi_approx - Decimal(math.pi))}")
print("\n\n")

"""
Hutton Pi Approximation: 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129833673362440656643086021394946395224737190702179860943702770539217176293176752384674818467669405132000568127145263560827785771342757789609173637178721468440901224953430146549585371050792279689258923542019956112129021960864034418159813629774771309960518707211349999998372978049951059731732816096318595024459455346908302642522308253344685035261931188171010003137838752886587533208381420617177669147303598253490428755468731159562863882353787593751957781857780532171226806613001927876611195909216420198

Absolute Error: 1.22464679914735317722606593227500105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129833673362440656643086021394946395224737190702179860943702770539217176293176752384674818467669405132000568127145263560827785771342757789609173637178721468440901224953430146549585371050792279689258923542019956112129021960864034418159813629774771309960518707211349999998372978049951059731732816096318595024459455346908302642522308253344685035261931188171010003137838752886587533208381420617177669147303598253490428755468731159562863882353787593751957781857780532171226806613001927876611195909216420198E-16



Hutton Pi Approximation (Euler): 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129833673362440656643086021394946395224737190702179860943702770539217176293176752384674818467669405132000568127145263560827785771342757789609173637178721468440901224953430146549585371050792279689258923542019956112129021960864034418159813629774771309960518707211349999998372978049951059731732816096318595024459455346908302642522308253344685035261931188171010003137838752886587533208381420617177669147303598253490428755468731159562863882353787593751957781857780532171226806613001927876611195909216419641

Absolute Error: 1.22464679914735317722606593227500105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129833673362440656643086021394946395224737190702179860943702770539217176293176752384674818467669405132000568127145263560827785771342757789609173637178721468440901224953430146549585371050792279689258923542019956112129021960864034418159813629774771309960518707211349999998372978049951059731732816096318595024459455346908302642522308253344685035261931188171010003137838752886587533208381420617177669147303598253490428755468731159562863882353787593751957781857780532171226806613001927876611195909216419641E-16
"""
